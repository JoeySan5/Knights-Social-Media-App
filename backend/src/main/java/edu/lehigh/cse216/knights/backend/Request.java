package edu.lehigh.cse216.knights.backend;

/**
 * Generic Request type. Contains data which should be given in any request,
 * like a session key.
 * There are some exceptions when a sessionKey is not checked, such as trying to
 * log in.
 * 
 * NB: since this will be created from JSON, all fields must be public, and we
 * do not need a constructor.
 */
public abstract class Request {
  /**
   * The session key for the current frontend session. Generated by the backend
   */
  public String sessionKey;

  /**
   * Requests for Login related requests. E.g. Logging in or Logging out.
   */
  public class LoginRequest extends Request {

    /**
     * The username of the user trying to log in.
     */
    public String credential;
  }
  /**
   * session key for the current frontend session. Generated by the backend and
   * provieded
   * to frontend upon a successful authentication for logging in.
   */

  /**
   * Requests for User related requests. E.g. Viewing or Editing a users profile
   * page.
   */
  public class UserRequest extends Request {

    /**
     * The unique identifier for the requested user. This is originally provided by
     * the google
     * API, then is stored as the primary key for a user in the database.
     * This field should be checked aginst the requester's userId, to check for
     * user's edit and delete permission.
     */
    public String mId;

    /**
     * The username of the requested user.
     * Display the username of the user who posted the comment and idea.
     */
    public String mUsername;

    /**
     * The email of the user.
     * By using the email, we can check that user is exist or not.
     */
    public String mEmail;

    /**
     * The GI (General Information) associated with the user. This could be
     * additional information
     * or metadata about the user.
     */
    public String mGI;

    /**
     * The SO (Specific Information) associated with the user. This could represent
     * more specific
     * details about the user.
     */
    public String mSO;

    /**
     * A note associated with the user. This could be any additional remarks or
     * comments about the user.
     */
    public String mNote;

    /**
     * Validity of the user. This field indicates if the user is active and valid in
     * the system.
     */
    public boolean mValid;
  }

  /**
   * IdeaRequest provides a format for clients to present a content for POST-ing
   * ideas,
   * or a likeIncrement value for PUT-ing ideas through likes and dislikes
   */
  public class IdeaRequest extends Request {

    /**
     * The unique identifier for the idea. This is generally provided by the
     * database and is unique
     * thoruhg the whole program.
     * 
     * This field can be used for display the comments on the idea.
     */
    public int mId;

    /**
     * The content being provided by the client.
     * 
     * In the case of POST, mContent contains the idea's content, so the json should
     * look like "{'mContent':'an example idea'}".
     */
    public String mContent;

    /**
     * In the case of like/dislike requests through PUT, mLikeIncrement is the
     * amount
     * by which the like total should be changed (+1 or -1). The json should
     * look like "{'mLikeIncrement':'1'}" or "{'mLikeIncrement':'-1'}".
     */
    public int mLikeIncrement;

    /**
     * The userId associated with the idea.
     */
    public String mUserId;

  }

  /**
   * Reqest format for liking and disliking Ideas
   */
  public class LikeRequest extends Request {
    /**
     * The userID associated with this like
     */

    public int IdeaId;
    /**
     * The idea id associated with this like
     */
    public int value;
  }

  /**
   * CommentRequest provides a format for clients to present a content for POST-ing
   * comments
   */
  public class CommentRequest extends Request{
    /**
     * The unique identifier for the comment. This is generally provided by the
     * database and is unique
     */
    public int mId;

    /**
     * The userid associated with this comment
     */
    public int mIdeaId;

    /**
     * The idea id associated with this comment
     */
    public String mContent;
  }
}
